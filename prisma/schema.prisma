generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_CREATOR
  CLIENT_ADMIN
  CLIENT_USER
  GUEST
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(GUEST)     // gennext: show.column
  accounts        Account[]                     // gennext: skip.list
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  agency          Agency?          @relation("AgencyUsers", fields: [agencyId], references: [id])
  agencyId        String?
  
  ownedAgencies   Agency[]         @relation("AgencyOwner")  
  clients         Client[]
  comments        Comment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Agency {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column

  users         User[] @relation("AgencyUsers")  // gennext: skip.list
  clients       Client[]                        // gennext: skip.list
  owner         User?  @relation("AgencyOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  billingItems  BillableItem[]                  // gennext: skip.list

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod
}

model Client {
    id                String    @id @default(cuid())
    name              String                    // gennext: show.column
    slug              String    @unique         // gennext: show.column 
    image             String?                   // gennext: show.column
    description       String?                   // gennext: show.column
    igHandle          String?                   // gennext: show.column
    brandVoice        String?

    createdAt         DateTime  @default(now()) // gennext: skip.zod
    updatedAt         DateTime  @updatedAt      // gennext: skip.zod

    users             User[]
    agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
    agencyId          String

    functionalities   Functionality[]
    billingItems      BillableItem[]
    publications      Publication[]
    pilars            Pilar[]
}

model Functionality {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  image         String?                         // gennext: show.column
  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}

model BillingType {
  id          String @id @default(cuid())
  name        String @unique                     // gennext: show.column
  description String?                            // gennext: show.column

  billableItems BillableItem[]                   // gennext: skip.list

  createdAt DateTime @default(now())             // gennext: skip.zod
  updatedAt DateTime @updatedAt                  // gennext: skip.zod
}

model BillableItem {
  id            String  @id @default(cuid())
  description   String?                           // gennext: show.column
  quantity      Int                               // genext: show.column
  unitPrice     Float                             // genext: show.column
  url           String?                           // genext: show.column
  tokenType     String?                           // genext: show.column

  billingType   BillingType @relation(fields: [billingTypeId], references: [id]) // Relaci√≥n muchos a uno con BillingType
  billingTypeId String

  agency        Agency @relation(fields: [agencyId], references: [id])
  agencyId      String

  client        Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId      String?

  createdAt     DateTime @default(now())          // gennext: skip.zod
  updatedAt     DateTime @updatedAt               // gennext: skip.zod
}

enum PublicationType {
  INSTAGRAM_POST
  INSTAGRAM_STORY
  INSTAGRAM_REEL
  LINKEDIN_POST
}

enum PublicationStatus {
  BORRADOR
  REVISADO
  APROBADO
  PROGRAMADO
  PUBLICADO
}

model Publication {
  id                String    @id @default(cuid())
  type              PublicationType                       // genext: show.column
  status            PublicationStatus @default(BORRADOR)  // genext: show.column
  title             String                                // genext: show.column
  images            String?                               // genext: show.column
  hashtags          String?                               
  copy              String?                               // genext: show.column
  link              String?

  createdAt         DateTime  @default(now())             // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                  // gennext: skip.zod  

  client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict) // genext: skip.list
  clientId          String
  pilar             Pilar?     @relation(fields: [pilarId], references: [id], onDelete: Restrict) // genext: skip.list
  pilarId           String?
  comments          Comment[]                                                                     // genext: skip.list
}

model Pilar {
  id                String    @id @default(cuid())
  name              String                                  // genext: show.column
  description       String?                                 // genext: show.column
  color             String                                  // genext: show.column
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict) // genext: skip.list
  clientId          String
  publications      Publication[]                                                                 // genext: skip.list
}

model Comment {
  id                String    @id @default(cuid())
  text              String                                  // genext: show.column

  createdAt         DateTime  @default(now())               // gennext: skip.zod  
  updatedAt         DateTime  @updatedAt                    // gennext: skip.zod

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId            String
  publication       Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade) // genext: skip.list
  publicationId     String
}
