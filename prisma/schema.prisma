generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_CREATOR
  CLIENT_ADMIN
  CLIENT_USER
  GUEST
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(GUEST)     // gennext: show.column
  accounts        Account[]                     // gennext: skip.list
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  agency          Agency?          @relation("AgencyUsers", fields: [agencyId], references: [id])
  agencyId        String?
  
  ownedAgencies   Agency[]         @relation("AgencyOwner")  
  clients         Client[]
  comments        Comment[]

  invitations     Invitation[]
  conversations   Conversation[]

  publications    PublicationListener[]

  comercial     Comercial?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Agency {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column
  stripeCustomerId String?                  // gennext: show.column

  emailFrom     String?                    // gennext: show.column
  contactEmail  String?                    // gennext: show.column

  domain        String?                    // gennext: show.column

  storageCloudName     String?                    // gennext: show.column
  storageApiKey        String?                    // gennext: show.column
  storageApiSecret     String?                    // gennext: show.column
  publicPreset         String?                    // gennext: show.column

  users         User[] @relation("AgencyUsers")  // gennext: skip.list
  clients       Client[]                        // gennext: skip.list
  owner         User?  @relation("AgencyOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod

  invitations   Invitation[]
  usageRecords  UsageRecord[]
  monthlyUsages MonthlyUsage[]
  subscriptions Subscription[]
}

model Client {
  id                String    @id @default(cuid())
  name              String                    // gennext: show.column
  slug              String                    // gennext: show.column 
  image             String?                   // gennext: show.column
  description       String?                   // gennext: show.column
  igHandle          String?                   // gennext: show.column
  brandVoice        String?
  prompt            String? @default("Eres un experto copywriter que ayuda al usuario copys para publicaciones de redes sociales...")
  copyPrompt        String? @default("Escribe el copy basado en el título...")
  defaultHashtags   String? @default("")
  includeBrandVoice Boolean? @default(false)
  includeLastCopys  Boolean? @default(false)

  messageArrivedDelay   Int       @default(5)
  sessionTTL            Int       @default(5)
  timezone              String @default("America/Montevideo")

  leadPrompt        String? @default("¡Eres es un asistente virtual de...!\n")
  ignoredNumbers    String? @default("")

  createdAt         DateTime  @default(now()) // gennext: skip.zod
  updatedAt         DateTime  @updatedAt      // gennext: skip.zod

  users             User[]
  agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
  agencyId          String

  functionalities   Functionality[]
  publications      Publication[]
  pilars            Pilar[]
  channels          Channel[]
  invitations       Invitation[]
  documents         Document[]
  conversations     Conversation[]
  usageRecords      UsageRecord[]
  monthlyUsages     MonthlyUsage[]    
  promptVersions    PromptVersion[]
  whatsappInstances WhatsappInstance[]
  audiences         Audience[]
  newsletters       Newsletter[]
  domains           Domain[]
  repositories      Repository[]
  repoData          RepoData[]
  contacts          Contact[]
  stages            Stage[]
  comercials        Comercial[]
  importedContacts  ImportedContact[]
}

model Functionality {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  image         String?                         // gennext: show.column
  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}

enum PublicationType {
  INSTAGRAM_POST
  INSTAGRAM_STORY
  INSTAGRAM_REEL
  LINKEDIN_POST
}

enum PublicationStatus {
  BORRADOR
  REVISADO
  APROBADO
  PROGRAMADO
  PUBLICADO
}

model Publication {
  id                String    @id @default(cuid())
  type              PublicationType                       // genext: show.column
  status            PublicationStatus @default(BORRADOR)  // genext: show.column
  title             String                                // genext: show.column
  images            String?                               // genext: show.column
  hashtags          String?                               
  copy              String?                               // genext: show.column  
  publicationDate   DateTime?                             // genext: show.column

  usageIsPending    Boolean @default(false)               // genext: show.column

  createdAt         DateTime  @default(now())             // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                  // gennext: skip.zod  

  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade) // genext: skip.list
  clientId          String
  pilar             Pilar?     @relation(fields: [pilarId], references: [id], onDelete: Restrict) // genext: skip.list
  pilarId           String?
  comments          Comment[]                                                                     // genext: skip.list

  usageRecord    UsageRecord? @relation("PublicationUsageRecord", fields: [usageRecordId], references: [id])
  usageRecordId  String? @unique

  listeners       PublicationListener[]
}

model Pilar {
  id                String    @id @default(cuid())
  name              String                                  // genext: show.column
  description       String?                                 // genext: show.column
  color             String                                  // genext: show.column
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade) // genext: skip.list
  clientId          String
  publications      Publication[]                                                                 // genext: skip.list
}

model Comment {
  id                String    @id @default(cuid())
  text              String                                  // genext: show.column
  edited            Boolean   @default(false)               // genext: show.column

  createdAt         DateTime  @default(now())               // gennext: skip.zod  
  updatedAt         DateTime  @updatedAt                    // gennext: skip.zod

  user              User?      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId            String?
  publication       Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade) // genext: skip.list
  publicationId     String
}

enum ChannelStatus {
  ACTIVE
  INACTIVE
  PRIVATE
}

model Channel {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  icon          String                          // gennext: show.column
  status        ChannelStatus @default(ACTIVE)  // gennext: show.column
  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id            String    @id @default(cuid())
  status        InvitationStatus @default(PENDING) // gennext: show.column

  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId        String

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade) // genext: skip.list
  clientId      String?

  agency        Agency?    @relation(fields: [agencyId], references: [id], onDelete: Cascade) // genext: skip.list
  agencyId      String?
}

enum DocumentType {
  COPY_LAB
  LEAD
}

model Document {
  id                     String   @id @default(cuid())
  name                   String                               // gennext: show.column
  description            String?                              // gennext: show.column
  jsonContent            String?  @db.Text                    
  textContent            String?  @db.Text                    // gennext: show.column
  fileSize               Int?
  wordsCount             Int?     @default(0)                 // gennext: show.column
  status                 String   @default("pending")         // gennext: skip.zod
  color                  String   @default("#000000")         // gennext: skip.zod
  type                   DocumentType @default(COPY_LAB)      // gennext: skip.zod

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod show.column

  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId              String
}

model Conversation {
  id             String   @id @default(cuid())
  phone          String                                           // gennext: skip.zod show.column
  name           String?  @default("")                            // gennext: skip.zod show.column
  imageUrl       String?                                          // gennext: skip.zod show.column
  title          String                                           // gennext: show.column
  context        String @default("")

  closed         Boolean  @default(false)

  type           DocumentType @default(COPY_LAB)                  // gennext: skip.zod
  
  chatwootConversationId Int?

  createdAt      DateTime @default(now())                          // gennext: skip.zod
  updatedAt      DateTime @updatedAt                              // gennext: skip.zod

  client         Client  @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId       String

  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // gennext: skip.list
  userId         String?

  usageRecord    UsageRecord @relation("ConversationUsageRecord", fields: [usageRecordId], references: [id])
  usageRecordId  String @unique

  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  contactId   String?

  messages       Message[]
  repoData       RepoData[]
}

model Message {
  id                String      @id @default(cuid())
  role              String
  content           String      @db.Text
  name              String?     @default("")                    // gennext: skip.zod show.column
  toolInvocations   String?     

  tokens            Int         @default(0)

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId    String
}

model UsageType {
  id                     String @id @default(cuid())
  name                   String @unique                       // gennext: show.column
  description            String?                              // gennext: show.column
  creditFactor           Float                                // gennext: show.column

  createdAt    DateTime @default(now())                       // gennext: skip.zod
  updatedAt    DateTime @updatedAt                            // gennext: skip.zod

  usageRecords UsageRecord[]                                  // gennext: skip.list
}

model UsageRecord {
  id                     String @id @default(cuid())
  description            String?                              // gennext: show.column
  
  imagesCount            Int? @default(0)                      // gennext: show.column
  videosCount            Int? @default(0)                      // gennext: show.column
  storageMB              Float? @default(0)                    // gennext: show.column

  credits                Float                                // gennext: show.column
  url                    String?                              // gennext: show.column

  usageType              UsageType @relation(fields: [usageTypeId], references: [id]) // gennext: skip.list
  usageTypeId            String

  agency                 Agency @relation(fields: [agencyId], references: [id]) // gennext: skip.list
  agencyId               String

  client                 Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull) // gennext: skip.list
  clientId               String?

  conversation           Conversation? @relation("ConversationUsageRecord") // gennext: skip.list
  publication            Publication?  @relation("PublicationUsageRecord") // gennext: skip.list

  createdAt              DateTime @default(now())              // gennext: skip.zod
  updatedAt              DateTime @updatedAt                   // gennext: skip.zod

  @@index([agencyId])                                          // gennext: skip.list
  @@index([clientId])                                          // gennext: skip.list
  @@index([usageTypeId])                                       // gennext: skip.list
  @@index([createdAt])                                         // gennext: skip.list
}

model MonthlyUsage {
  id                String    @id @default(cuid())
  month             Int                              // gennext: show.column
  year              Int
  storageCredits    Float @default(0)                 // gennext: show.column
  publicationsCount Int @default(0)                   // gennext: show.column
  imagesCount       Int @default(0)                   // gennext: show.column
  videosCount       Int @default(0)                   // gennext: show.column
  storageMB         Float @default(0)                 // gennext: show.column
  llmCredits        Float @default(0)                 // gennext: show.column
  conversationsCount Int @default(0)                  // gennext: show.column

  monthLabel        String                            // gennext: show.column
  agencyName        String                            // gennext: show.column
  clientName        String                            // gennext: show.column

  client            Client  @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId          String

  agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade) // gennext: skip.list
  agencyId          String

  createdAt         DateTime @default(now())              // gennext: skip.zod
  updatedAt         DateTime @updatedAt                   // gennext: skip.zod

  @@index([month, year, clientId])                        // gennext: skip.list
  @@index([month, year, agencyId])                        // gennext: skip.list
}

model Plan {
  id                     String  @id @default(cuid())
  name                   String  @unique                       // gennext: show.column
  description            String?                               // gennext: show.column
  price                  Float                                 // gennext: show.column
  currency               String  @default("USD")               // gennext: show.column
  features               String                                // gennext: show.column
  priceId                String? @unique                       // gennext: show.column

  maxClients             Int     @default(2)                   // gennext: show.column
  maxCredits             Int     @default(500)                 // gennext: show.column
  maxLLMCredits          Int     @default(500)                 // gennext: show.column

  frecuency              Int     @default(1)                   // gennext: show.column
  frecuencyType          String  @default("months")            // gennext: show.column
  billingDay             Int     @default(1)                   // gennext: show.column
  billingDayProportional Boolean @default(true)                // gennext: show.column

  createdAt              DateTime @default(now())              // gennext: skip.zod
  updatedAt              DateTime @updatedAt                   // gennext: skip.zod

  subscriptions          Subscription[]
}

enum SubscriptionStatus {
  CREATED
  ACTIVE
  CANCELLED
  UPGRADED
  DOWNGRADED
}

model Subscription {
  id                   String  @id @default(cuid())

  stripeSubscriptionId String                                // gennext: show.column
  stripeCustomerEmail  String                                // gennext: show.column
  stripePeriodEnd      DateTime                              // gennext: show.column
  stripePaymentMethod  String?                                // gennext: show.column
  stripeNextBilling    DateTime?                              // gennext: show.column

  planName             String                                // gennext: show.column
  planDescription      String?                               // gennext: show.column
  planPrice            Float                                 // gennext: show.column
  planCurrency         String                                // gennext: show.column

  maxClients           Int     @default(2)                   // gennext: show.column
  maxCredits           Int     @default(500)                 // gennext: show.column
  maxLLMCredits        Int     @default(500)                 // gennext: show.column

  status               SubscriptionStatus @default(CREATED)  // gennext: show.column

  createdAt            DateTime @default(now())              // gennext: skip.zod
  updatedAt            DateTime @updatedAt                   // gennext: skip.zod
  canceledAt           DateTime?                             // gennext: skip.zod

  agency               Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade) // gennext: skip.list
  agencyId             String

  plan                 Plan @relation(fields: [planId], references: [id], onDelete: Cascade) // gennext: skip.list
  planId               String
}

model PublicationListener {
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
  publicationId String
  
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@id([publicationId, userId])
}

model PromptVersion {
  id                  String       @id @default(cuid())
  content             String
  timestamp           DateTime     @default(now())
  user                String

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
}

model WhatsappInstance {
  id                  String @id @default(cuid())
  externalId          String
  name                String @unique
  number              String?

  chatwootAccountId   Int?
  chatwootUrl         String?
  chatwootAccessToken String?

  whatsappInboxId     String?

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model Audience {
  id                  String @id @default(cuid())
  name                String                             // gennext: show.column

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  contacts            EmailContact[]                     // gennext: skip.list
  newsletters         Newsletter[]
}

model EmailContact {
  id                  String @id @default(cuid())
  name                String?                            // gennext: show.column
  email               String                             // gennext: show.column
  unsubscribed        Boolean @default(false)            // gennext: show.column
  
  createdAt           DateTime @default(now())           // gennext: skip.zod
  updatedAt           DateTime @updatedAt                // gennext: skip.zod

  audience            Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade)
  audienceId          String
}
// "delivered" | "opened" | "clicked" | "bounced" | "complained" | "delivery_delayed"
enum EmailSendStatus {
  PENDING
  OPENED
  CLICKED
  SENT
  DELIVERED
  DELIVERED_DELAYED
  COMPLAINED
  BOUNCED
  CANCELLED
}

model EmailSend {
  id            String    @id @default(cuid())
  status        EmailSendStatus @default(PENDING) // gennext: show.column
  name          String?                           // gennext: show.column
  to            String                            // gennext: show.column
  subject       String                            // gennext: show.column

  resendId        String? @unique

  createdAt     DateTime  @default(now())         // gennext: skip.zod
  sentAt        DateTime?                         // gennext: show.column skip.zod

  newsletter    Newsletter @relation(fields: [newsletterId], references: [id], onDelete: Cascade)
  newsletterId  String
}

model Domain {
  id                  String @id @default(cuid())
  name                String                              // gennext: show.column

  createdAt           DateTime @default(now())            // gennext: skip.zod
  updatedAt           DateTime @updatedAt                 // gennext: skip.zod

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
}

enum NewsletterStatus {
  DRAFT
  PENDING
  SENT
  CANCELLED
}

model Newsletter {
  id                  String    @id @default(cuid())
  subject             String                              // gennext: show.column
  status              NewsletterStatus @default(DRAFT)    // gennext: show.column
  sentByName          String?                             // gennext: show.column
  nameFrom            String?                             // gennext: show.column
  emailFrom           String?                             // gennext: show.column
  replyTo             String?                             // gennext: show.column

  contentHtml         String?
  contentJson         String?
  banner              String?
  footerText          String?
  footerLinkHref      String?
  footerLinkText      String?

  createdAt           DateTime @default(now())            // gennext: skip.zod
  updatedAt           DateTime @updatedAt                 // gennext: skip.zod
  startedAt           DateTime?                           // gennext: show.column

  emails              EmailSend[]                         // gennext: skip.list

  audience            Audience? @relation(fields: [audienceId], references: [id], onDelete: SetNull)
  audienceId          String?

  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String
}

model Repository {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  color               String       @default("rgb(68, 190, 154)")
  isActive            Boolean      @default(true)       // gennext: show.column
  
  functionName        String                             // gennext: show.column
  functionDescription String       @default("")          // gennext: show.column
  functionDefinition  String       @default("")          // gennext: show.column

  executionResponse   String @default("Registro exitoso.")// gennext: show.column

  webHookUrl          String?                             // gennext: show.column
  uiLabel             String       @default("Registro")   // gennext: show.column
  notifyPhones        String[]     @default([])           // gennext: show.column skip.zod skip.list
  tags                String[]     @default([])           // gennext: show.column skip.zod skip.list

  moveToStageId  String?
  assignToComercial Boolean @default(false)

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  fields              Field[]                            // gennext: skip.list
  repoData            RepoData[]                         // gennext: skip.list
}

enum FieldType {
  string
  number
  boolean
  list
}

model Field {
  id                  String       @id @default(cuid())
  name                String                             // gennext: show.column
  type                FieldType                          // gennext: show.column
  description         String                             // gennext: show.column
  required            Boolean                            // gennext: show.column
  order               Int       @default(0)
  etiquetar           Boolean    @default(false)
  listOptions         String[]                           // gennext: show.column
  repository          Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId        String?

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model RepoData {
  id                  String       @id @default(cuid())
  repoName            String                              // gennext: show.column
  phone               String                              // gennext: show.column
  functionName        String                              // gennext: show.column

  data                String                                // gennext: show.column

  repository          Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  repositoryId        String?

  client              Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId            String

  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId      String

  createdAt           DateTime     @default(now())       // gennext: skip.zod
  updatedAt           DateTime     @updatedAt            // gennext: skip.zod
}

model Contact {
  id            String      @id @default(cuid())
  chatwootId    String?
  name          String                                      // gennext: show.column
  phone         String?                                     // gennext: show.column
  imageUrl      String?                                     // gennext: show.column
  tags          String[]                                    // gennext: show.column

  src           String                                      // gennext: show.column

  order         Int         @default(0)

  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  stage         Stage      @relation(fields: [stageId], references: [id], onDelete: Restrict)
  stageId       String

  comercial     Comercial? @relation(fields: [comercialId], references: [id], onDelete: SetNull)
  comercialId   String?

  conversations Conversation[]                         // gennext: skip.list
  contactEvents ContactEvent[]                         // gennext: skip.list

  createdAt     DateTime    @default(now())                 // gennext: skip.zod
  updatedAt     DateTime    @updatedAt                      // gennext: skip.zod

  @@unique([clientId, chatwootId])
}

model Stage {
  id          String     @id @default(cuid())            
  name        String                                      // gennext: show.column
  description String?                                     // gennext: show.column
  order       Int                                         // gennext: show.column
  isFinal     Boolean    @default(false)                  // gennext: show.column
  isBotEnabled Boolean    @default(false)                  // gennext: show.column
  color       String?                                     // gennext: show.column

  client      Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String

  contacts    Contact[]                                  // gennext: skip.list
  
  createdAt   DateTime   @default(now())                 // gennext: skip.zod
  updatedAt   DateTime   @updatedAt                      // gennext: skip.zod
}

model Comercial {
  id                 String    @id @default(cuid())
  chatwootUserId     Int?                                          // gennext: show.column
  chatwootUserName   String?                                       // gennext: show.column
  activo             Boolean   @default(true)                      // gennext: show.column
  lastAssignedAt     DateTime  @default(now())                     // gennext: show.column
  notifyAssigned     Boolean   @default(true)                      // gennext: show.column
  phone              String?                                       // gennext: show.column

  user               User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId             String    @unique

  contacts           Contact[]                                     // gennext: skip.list
  
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String

  createdAt          DateTime  @default(now())                     // gennext: skip.zod
  updatedAt          DateTime  @updatedAt                          // gennext: skip.zod
}

enum ImportedContactStatus {
  PENDIENTE
  PROCESADO
  ERROR
}

enum ImportedContactType {
  API
  CSV
  MANUAL
}

model ImportedContact {
  id                 String      @id @default(cuid())
  name               String                                      // gennext: show.column
  phone              String                                      // gennext: show.column
  tags               String[]                                    // gennext: show.column
  stageName          String?                                     // gennext: show.column

  chatwootContactId  String?

  status             ImportedContactStatus @default(PENDIENTE) // gennext: show.column
  error              String?                                   // gennext: show.column

  type               ImportedContactType @default(MANUAL)

  client             Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String

  createdAt          DateTime   @default(now())                 // gennext: skip.zod
  updatedAt          DateTime   @updatedAt                      // gennext: skip.zod
}

enum ContactEventType {
  CREATED
  TAGGED
  UNTAGGED
  MOVED_TO_STAGE
  EDITED
  CUSTOM_FIELD_VALUE_UPDATED
}

model ContactEvent {
  id            String     @id @default(cuid())       
  type          ContactEventType                       // gennext: show.column
  info          String?                                // gennext: show.column
  by            String?                                // gennext: show.column

  contact       Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId     String

  createdAt     DateTime   @default(now())             // gennext: skip.zod
}