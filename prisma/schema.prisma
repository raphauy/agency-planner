generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_CREATOR
  CLIENT_ADMIN
  CLIENT_USER
  GUEST
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(GUEST)     // gennext: show.column
  accounts        Account[]                     // gennext: skip.list
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  agency          Agency?          @relation("AgencyUsers", fields: [agencyId], references: [id])
  agencyId        String?
  
  ownedAgencies   Agency[]         @relation("AgencyOwner")  
  clients         Client[]
  comments        Comment[]

  invitations     Invitation[]
  conversations   Conversation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Agency {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column
  stripeCustomerId String?                  // gennext: show.column

  emailFrom     String?                    // gennext: show.column
  contactEmail  String?                    // gennext: show.column

  domain        String?                    // gennext: show.column

  storageCloudName     String?                    // gennext: show.column
  storageApiKey        String?                    // gennext: show.column
  storageApiSecret     String?                    // gennext: show.column

  users         User[] @relation("AgencyUsers")  // gennext: skip.list
  clients       Client[]                        // gennext: skip.list
  owner         User?  @relation("AgencyOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod

  invitations   Invitation[]
  usageRecords  UsageRecord[]
  monthlyUsages MonthlyUsage[]
  subscriptions Subscription[]
}

model Client {
    id                String    @id @default(cuid())
    name              String                    // gennext: show.column
    slug              String                    // gennext: show.column 
    image             String?                   // gennext: show.column
    description       String?                   // gennext: show.column
    igHandle          String?                   // gennext: show.column
    brandVoice        String?
    prompt            String? @default("Eres un experto copywriter que ayuda al usuario copys para publicaciones de redes sociales...")
    copyPrompt        String? @default("Escribe el copy basado en el t√≠tulo...")
    defaultHashtags   String? @default("")
    includeBrandVoice Boolean? @default(false)
    includeLastCopys  Boolean? @default(false)

    createdAt         DateTime  @default(now()) // gennext: skip.zod
    updatedAt         DateTime  @updatedAt      // gennext: skip.zod

    users             User[]
    agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
    agencyId          String

    functionalities   Functionality[]
    publications      Publication[]
    pilars            Pilar[]
    channels          Channel[]
    invitations       Invitation[]
    documents         Document[]
    conversations     Conversation[]
    usageRecords      UsageRecord[]
    monthlyUsages     MonthlyUsage[]    
}

model Functionality {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  image         String?                         // gennext: show.column
  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}

enum PublicationType {
  INSTAGRAM_POST
  INSTAGRAM_STORY
  INSTAGRAM_REEL
  LINKEDIN_POST
}

enum PublicationStatus {
  BORRADOR
  REVISADO
  APROBADO
  PROGRAMADO
  PUBLICADO
}

model Publication {
  id                String    @id @default(cuid())
  type              PublicationType                       // genext: show.column
  status            PublicationStatus @default(BORRADOR)  // genext: show.column
  title             String                                // genext: show.column
  images            String?                               // genext: show.column
  hashtags          String?                               
  copy              String?                               // genext: show.column  
  publicationDate   DateTime?                             // genext: show.column

  usageIsPending    Boolean @default(false)               // genext: show.column

  createdAt         DateTime  @default(now())             // gennext: skip.zod
  updatedAt         DateTime  @updatedAt                  // gennext: skip.zod  

  client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict) // genext: skip.list
  clientId          String
  pilar             Pilar?     @relation(fields: [pilarId], references: [id], onDelete: Restrict) // genext: skip.list
  pilarId           String?
  comments          Comment[]                                                                     // genext: skip.list

  usageRecord    UsageRecord? @relation("PublicationUsageRecord", fields: [usageRecordId], references: [id])
  usageRecordId  String? @unique
}

model Pilar {
  id                String    @id @default(cuid())
  name              String                                  // genext: show.column
  description       String?                                 // genext: show.column
  color             String                                  // genext: show.column
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade) // genext: skip.list
  clientId          String
  publications      Publication[]                                                                 // genext: skip.list
}

model Comment {
  id                String    @id @default(cuid())
  text              String                                  // genext: show.column
  edited            Boolean   @default(false)               // genext: show.column

  createdAt         DateTime  @default(now())               // gennext: skip.zod  
  updatedAt         DateTime  @updatedAt                    // gennext: skip.zod

  user              User?      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId            String?
  publication       Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade) // genext: skip.list
  publicationId     String
}

model Channel {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  icon          String                          // gennext: show.column

  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id            String    @id @default(cuid())
  status        InvitationStatus @default(PENDING) // gennext: show.column

  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)    // genext: skip.list
  userId        String

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade) // genext: skip.list
  clientId      String?

  agency        Agency?    @relation(fields: [agencyId], references: [id], onDelete: Cascade) // genext: skip.list
  agencyId      String?
}

model Document {
  id                     String   @id @default(cuid())
  name                   String                               // gennext: show.column
  description            String?                              // gennext: show.column
  jsonContent            String?  @db.Text                    
  textContent            String?  @db.Text                    // gennext: show.column
  type                   String   @default("text")            // gennext: skip.zod
  fileSize               Int?
  wordsCount             Int?     @default(0)                 // gennext: show.column
  status                 String   @default("pending")         // gennext: skip.zod
  color                  String   @default("#000000")         // gennext: skip.zod

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod show.column

  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId              String
}

model Conversation {
  id             String   @id @default(cuid())
  phone          String                                           // gennext: skip.zod show.column
  name           String?  @default("")                            // gennext: skip.zod show.column
  title          String                                           // gennext: show.column

  createdAt      DateTime @default(now())                          // gennext: skip.zod
  updatedAt      DateTime @updatedAt                              // gennext: skip.zod

  messages       Message[]

  client         Client  @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId       String

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade) // gennext: skip.list
  userId         String

  usageRecord    UsageRecord @relation("ConversationUsageRecord", fields: [usageRecordId], references: [id])
  usageRecordId  String @unique
}

model Message {
  id                String      @id @default(cuid())
  role              String
  content           String      @db.Text
  name              String?     @default("")                    // gennext: skip.zod show.column
  toolInvocations   String?     

  tokens            Int         @default(0)

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId    String
}

model UsageType {
  id                     String @id @default(cuid())
  name                   String @unique                       // gennext: show.column
  description            String?                              // gennext: show.column
  creditFactor           Float                                // gennext: show.column

  createdAt    DateTime @default(now())                       // gennext: skip.zod
  updatedAt    DateTime @updatedAt                            // gennext: skip.zod

  usageRecords UsageRecord[]                                  // gennext: skip.list
}

model UsageRecord {
  id                     String @id @default(cuid())
  description            String?                              // gennext: show.column
  
  imagesCount            Int? @default(0)                      // gennext: show.column
  videosCount            Int? @default(0)                      // gennext: show.column
  storageMB              Float? @default(0)                    // gennext: show.column

  credits                Float                                // gennext: show.column
  url                    String?                              // gennext: show.column

  usageType              UsageType @relation(fields: [usageTypeId], references: [id]) // gennext: skip.list
  usageTypeId            String

  agency                 Agency @relation(fields: [agencyId], references: [id]) // gennext: skip.list
  agencyId               String

  client                 Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull) // gennext: skip.list
  clientId               String?

  conversation           Conversation? @relation("ConversationUsageRecord") // gennext: skip.list
  publication            Publication?  @relation("PublicationUsageRecord") // gennext: skip.list

  createdAt              DateTime @default(now())              // gennext: skip.zod
  updatedAt              DateTime @updatedAt                   // gennext: skip.zod

  @@index([agencyId])                                          // gennext: skip.list
  @@index([clientId])                                          // gennext: skip.list
  @@index([usageTypeId])                                       // gennext: skip.list
  @@index([createdAt])                                         // gennext: skip.list
}

model MonthlyUsage {
  id                String    @id @default(cuid())
  month             Int                              // gennext: show.column
  year              Int
  storageCredits    Float @default(0)                 // gennext: show.column
  publicationsCount Int @default(0)                   // gennext: show.column
  imagesCount       Int @default(0)                   // gennext: show.column
  videosCount       Int @default(0)                   // gennext: show.column
  storageMB         Float @default(0)                 // gennext: show.column
  llmCredits        Float @default(0)                 // gennext: show.column
  conversationsCount Int @default(0)                  // gennext: show.column

  monthLabel        String                            // gennext: show.column
  agencyName        String                            // gennext: show.column
  clientName        String                            // gennext: show.column

  client            Client  @relation(fields: [clientId], references: [id], onDelete: Cascade) // gennext: skip.list
  clientId          String

  agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade) // gennext: skip.list
  agencyId          String

  createdAt         DateTime @default(now())              // gennext: skip.zod
  updatedAt         DateTime @updatedAt                   // gennext: skip.zod

  @@index([month, year, clientId])                        // gennext: skip.list
  @@index([month, year, agencyId])                        // gennext: skip.list
}

model Plan {
  id                     String  @id @default(cuid())
  name                   String  @unique                       // gennext: show.column
  description            String?                               // gennext: show.column
  price                  Float                                 // gennext: show.column
  currency               String  @default("USD")               // gennext: show.column
  features               String                                // gennext: show.column
  priceId                String? @unique                       // gennext: show.column

  maxClients             Int     @default(2)                   // gennext: show.column
  maxCredits             Int     @default(500)                 // gennext: show.column
  maxLLMCredits          Int     @default(500)                 // gennext: show.column

  frecuency              Int     @default(1)                   // gennext: show.column
  frecuencyType          String  @default("months")            // gennext: show.column
  billingDay             Int     @default(1)                   // gennext: show.column
  billingDayProportional Boolean @default(true)                // gennext: show.column

  createdAt              DateTime @default(now())              // gennext: skip.zod
  updatedAt              DateTime @updatedAt                   // gennext: skip.zod

  subscriptions          Subscription[]
}

enum SubscriptionStatus {
  CREATED
  ACTIVE
  CANCELLED
  UPGRADED
  DOWNGRADED
}

model Subscription {
  id                   String  @id @default(cuid())

  stripeSubscriptionId String                                // gennext: show.column
  stripeCustomerEmail  String                                // gennext: show.column
  stripePeriodEnd      DateTime                              // gennext: show.column
  stripePaymentMethod  String?                                // gennext: show.column
  stripeNextBilling    DateTime?                              // gennext: show.column

  planName             String                                // gennext: show.column
  planDescription      String?                               // gennext: show.column
  planPrice            Float                                 // gennext: show.column
  planCurrency         String                                // gennext: show.column

  maxClients           Int     @default(2)                   // gennext: show.column
  maxCredits           Int     @default(500)                 // gennext: show.column
  maxLLMCredits        Int     @default(500)                 // gennext: show.column

  status               SubscriptionStatus @default(CREATED)  // gennext: show.column

  createdAt            DateTime @default(now())              // gennext: skip.zod
  updatedAt            DateTime @updatedAt                   // gennext: skip.zod
  canceledAt           DateTime?                             // gennext: skip.zod

  agency               Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade) // gennext: skip.list
  agencyId             String

  plan                 Plan @relation(fields: [planId], references: [id], onDelete: Cascade) // gennext: skip.list
  planId               String
}