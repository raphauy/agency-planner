generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_CREATOR
  CLIENT_ADMIN
  CLIENT_USER
  GUEST
}

model User {
  id              String    @id @default(cuid())
  name            String?                       // gennext: show.column  
  email           String    @unique             // gennext: show.column
  emailVerified   DateTime?                     // gennext: show.column
  image           String?
  role            UserRole  @default(GUEST)     // gennext: show.column
  accounts        Account[]                     // gennext: skip.list
  otpConfirmation OTPConfirmation?

  createdAt       DateTime  @default(now())     // gennext: skip.zod
  updatedAt       DateTime  @updatedAt          // gennext: skip.zod

  agency          Agency?          @relation("AgencyUsers", fields: [agencyId], references: [id])
  agencyId        String?
  
  ownedAgencies   Agency[]         @relation("AgencyOwner")
  
  clients         Client[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model OTPCode {
  id String @id @default(cuid())
  email String
  code String @unique
  expires DateTime

  @@unique([email, code])
}

model OTPConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Agency {
  id            String @id @default(cuid())
  name          String                     // gennext: show.column
  slug          String @unique             // gennext: show.column
  image         String?                    // gennext: show.column
  description   String?                    // gennext: show.column
  igHandle      String?                    // gennext: show.column

  users         User[] @relation("AgencyUsers")  // gennext: skip.list
  clients       Client[]                        // gennext: skip.list
  owner         User?  @relation("AgencyOwner", fields: [ownerId], references: [id])  // gennext: skip.list
  ownerId       String?

  createdAt DateTime @default(now())           // gennext: skip.zod
  updatedAt DateTime @updatedAt                // gennext: skip.zod
}

model Client {
    id                String    @id @default(cuid())
    name              String                    // gennext: show.column
    slug              String    @unique         // gennext: show.column 
    image             String?                   // gennext: show.column
    description       String?                   // gennext: show.column
    igHandle          String?                   // gennext: show.column
    brandVoice        String?

    createdAt         DateTime  @default(now()) // gennext: skip.zod
    updatedAt         DateTime  @updatedAt      // gennext: skip.zod

    users             User[]
    agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
    agencyId          String

    functionalities   Functionality[]
}

model Functionality {
  id            String    @id @default(cuid())
  name          String                          // gennext: show.column
  slug          String    @unique               // gennext: show.column
  image         String?                         // gennext: show.column
  createdAt     DateTime @default(now())        // gennext: skip.zod  
  updatedAt     DateTime @updatedAt             // gennext: skip.zod

  clients       Client[]                        // gennext: skip.list
}